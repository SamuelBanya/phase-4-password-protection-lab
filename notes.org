* Notes
These are the commands I used to set this lab up:
#+begin_src bash
bundle install
npm install --prefix client
#+end_src

I ran the backend with the 'rails s' command, and I ran the frontend with the 'npm start --prefix client' command.

<2022-11-04 Fri 16:58>: I had to adjust the 'React scripts' section in the 'config/package.json' manifest file with the following to overcome the 'ERR_OSSL_EVP_UNSUPPORTED' error:
#+begin_src json
  "scripts": {
    "start": "PORT=4000 react-scripts --openssl-legacy-provider start",
    "build": "react-scripts --openssl-legacy-provider build",
#+end_src

Goals For Lab:

Create a User model, and migrations for a users table with username and password_digest columns.
- Make sure to use password_digest, not password, in your migration, and to include the has_secure_password macro in your model.

Create a UsersController with a create method that responds to a POST /signup request.
- It should: create a new user; save their hashed password in the database; save the user's ID in the session hash; and return the user object in the JSON response.

Add a show method to your UsersController that responds to a GET /me request.
- If the user is authenticated, return the user object in the JSON response.

Create a Sessions controller with a create action for logging in that responds to a POST /login request, and a destroy action for logging out that responds to a DELETE /logout request.

<2022-11-04 Fri 17:03>: I created the 'User' model with the following 'rails g model user --no-test-framework' command:
#+begin_src ruby
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-4/phase-4-password-protection-lab $ rails g model user --no-test-framework
      invoke  active_record
      create    db/migrate/20221104220347_create_users.rb
      create    app/models/user.rb
#+end_src

I then modified the 'db/migrate/20221104220347_create_users.rb' migration file with the following contents:
#+begin_src ruby
class CreateUsers < ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      t.string :username
      t.string :password_digest

      t.timestamps
    end
  end
end
#+end_src

I then created a related 'UsersController' with the following 'rails g controller --no-test-framework' command:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-4/phase-4-password-protection-lab $ rails g controller users_controller --no-test-framework
      create  app/controllers/users_controller.rb
#+end_src

I then modified the contents of the 'app/controllers/users_controller.rb' Users Controller file with the following:
#+begin_src ruby
class UsersController < ApplicationController
    before_action :authorize, only: [:show]
    # Create a UsersController with a create method that responds to a POST /signup request.
    # It should: create a new user;
    # save their hashed password in the database;
    # save the user's ID in the session hash;
    # and return the user object in the JSON response.
    def create
        user = User.create(user_params)
        if user.valid?
            session[:user_id] = user.id
            render json: user, status: :created
        else
            render json: { error: user.errors.full_messages }, status: :unprocessable_entity
        end
    end
    # Add a show method to your UsersController that responds to a GET /me request.
    def show
        user = User.find_by(id: session[:user_id])
        render json: user
    end

    private

    # If the user is authenticated, return the user object in the JSON response.
    def authorize
        return render json: { error: "Not authorized" }, status: :unauthorized unless session.include? :user_id
    end

    def user_params
        params.permit(:username, :password, :password_confirmation)
    end
end
#+end_src

I then created a 'Sessions' controller with the 'rails g controller sessions_controller --no-test-framework' command:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-4/phase-4-password-protection-lab $ rails g controller sessions_controller --no-test-framework
      create  app/controllers/sessions_controller.rb
#+end_src

I then modified the 'app/controllers/sessions_controller.rb' Sessions Controller with the following contents:
#+begin_src ruby
class SessionsController < ApplicationController
    # with a create action for logging in that responds to a POST /login request:
    def create
        user = User.find_by(username: params[:username])
        if user&.authenticate(params[:password])
            session[:user_id] = user.id
            render json: user, status: :created
        else
            render json: { error: "Invalid username or password" }, status: :unauthorized
        end
    end
    # destroy action for logging out that responds to a DELETE /logout request
    def destroy
        session.delete :user_id
        head :no_content
    end
end
#+end_src

I then included the 'has_secure_password' macro from Rails in the 'app/models/user.rb' User model file:
#+begin_src ruby
class User < ApplicationRecord
    # Make sure to include the has_secure_password macro in your model
    has_secure_password
end
#+end_src

I then created a related Serializer with the 'rails g serializer user_serializer --no-test-framework' command:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-4/phase-4-password-protection-lab $ rails g serializer user_serializer --no-test-framework
      create  app/serializers/user_serializer_serializer.rb
#+end_src

I then modified the contents of the 'app/serializers/user_serializer_serializer.rb' User Serializer serializer with the following:
#+begin_src ruby
class UserSerializerSerializer < ActiveModel::Serializer
  attributes :id, :username
end
#+end_src

I then adjusted the routes in 'config/routes.rb' to include the following so that they can handoff properly from the frontend React application to the appropriate backend Rails methods in the associated controller methods:
#+begin_src ruby
Rails.application.routes.draw do
  # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html

  # Create a UsersController with a create method that responds to a POST /signup request.
  post "/signup", to: "users#create"

  # Add a show method to your UsersController that responds to a GET /me request.
  get "/me", to: "users#show"

  # Create a Sessions controller with a create action for logging in that responds to a POST /login request, and a destroy action for logging out that responds to a DELETE /logout request.
  post "/login", to: "sessions#create"
  delete "/logout", to: "sessions#destroy"
end
#+end_src

I then ran the related rails migrations with the 'rails db:migrate' command:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-4/phase-4-password-protection-lab $ rails db:migrate
== 20221104220347 CreateUsers: migrating ======================================
-- create_table(:users)
   -> 0.0022s
== 20221104220347 CreateUsers: migrated (0.0023s) =============================
#+end_src
